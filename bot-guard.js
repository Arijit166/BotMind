import { createModuleLogger } from '../utils/logger.js';

export class BotGuard {
Â  // ðŸŸ¢ CORRECTED: Accept 'config' as a parameter.
Â  constructor(config) {
Â  Â  this.config = config;
Â  Â  this.logger = createModuleLogger('BotGuard');
Â  Â  
Â  Â  // Use this.config to access properties
Â  Â  // ðŸŸ¢ CORRECTED: Changed 'config.guard' to 'config.state.default.rateLimit'
Â  Â  this.rateLimitEnabled = this.config.state.default.rateLimit.enabled; 
Â  Â  this.maxMessagesPerMinute = this.config.state.default.rateLimit.maxMessagesPerMinute;
Â  Â  this.maxMessagesPerHour = this.config.state.default.rateLimit.maxMessagesPerHour;
Â  Â  this.cooldownMessages = this.config.state.default.rateLimit.cooldownMessages;

Â  Â  // Track user activity
Â  Â  this.userActivity = new Map(); // userId -> { minuteCount, hourCount, lastMessageTime, warningCount }
Â  Â  this.blockedUsers = new Map(); // userId -> { blockedUntil, reason }
Â  Â  this.suspiciousPatterns = new Map(); // userId -> { spamCount, repeatCount, lastMessages }
Â  Â  
Â  Â  // Cleanup interval
Â  Â  this.setupCleanupTimer();
Â  }

Â  /**
Â  Â * Main method to check if message should be processed
Â  Â */
Â  async checkMessage(message, chat, contact) {
Â  Â  try {
Â  Â  Â  const userId = contact.id._serialized;
Â  Â  Â  const messageText = message.body?.trim() || '';
Â  Â  Â  const isGroup = chat.isGroup;
Â  Â  Â  const timestamp = Date.now();

Â  Â  Â  this.logger.debug('Checking message with bot guard', {
Â  Â  Â  Â  userId,
Â  Â  Â  Â  isGroup,
Â  Â  Â  Â  messageLength: messageText.length,
Â  Â  Â  Â  hasMedia: message.hasMedia
Â  Â  Â  });

Â  Â  Â  // Skip all checks for bot owner
Â  Â  Â  if (this.isOwner(userId)) {
Â  Â  Â  Â  this.updateUserActivity(userId, messageText, timestamp);
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  allowed: true,
Â  Â  Â  Â  Â  reason: 'owner_bypass',
Â  Â  Â  Â  Â  shouldRespond: false,
Â  Â  Â  Â  Â  response: null
Â  Â  Â  Â  };
Â  Â  Â  }

Â  Â  Â  // Check if user is blocked
Â  Â  Â  const blockCheck = this.checkBlocked(userId);
Â  Â  Â  if (!blockCheck.allowed) {
Â  Â  Â  Â  return blockCheck;
Â  Â  Â  }

Â  Â  Â  // Check rate limiting
Â  Â  Â  if (this.rateLimitEnabled) {
Â  Â  Â  Â  const rateLimitCheck = this.checkRateLimit(userId, timestamp);
Â  Â  Â  Â  if (!rateLimitCheck.allowed) {
Â  Â  Â  Â  Â  return rateLimitCheck;
Â  Â  Â  Â  }
Â  Â  Â  }

Â  Â  Â  // Check for suspicious patterns
Â  Â  Â  const patternCheck = this.checkSuspiciousPatterns(userId, messageText, timestamp);
Â  Â  Â  if (!patternCheck.allowed) {
Â  Â  Â  Â  return patternCheck;
Â  Â  Â  }

Â  Â  Â  // Check for spam content
Â  Â  Â  const spamCheck = this.checkSpamContent(messageText, isGroup);
Â  Â  Â  if (!spamCheck.allowed) {
Â  Â  Â  Â  this.trackSuspiciousActivity(userId, 'spam_content');
Â  Â  Â  Â  return spamCheck;
Â  Â  Â  }

Â  Â  Â  // Update user activity
Â  Â  Â  this.updateUserActivity(userId, messageText, timestamp);

Â  Â  Â  // Message passed all checks
Â  Â  Â  return {
Â  Â  Â  Â  allowed: true,
Â  Â  Â  Â  reason: null,
Â  Â  Â  Â  shouldRespond: false,
Â  Â  Â  Â  response: null
Â  Â  Â  };

Â  Â  } catch (error) {
Â  Â  Â  this.logger.error('Error in bot guard check', {
Â  Â  Â  Â  error: error.message,
Â  Â  Â  Â  userId: contact?.id?._serialized
Â  Â  Â  });

Â  Â  Â  // On error, allow the message but log it
Â  Â  Â  return {
Â  Â  Â  Â  allowed: true,
Â  Â  Â  Â  reason: 'guard_error',
Â  Â  Â  Â  shouldRespond: false,
Â  Â  Â  Â  response: null
Â  Â  Â  };
Â  Â  }
Â  }

Â  /**
Â  Â * Check if user is the bot owner (should bypass most restrictions)
Â  Â */
Â  isOwner(userId) {
Â  Â  try {
Â  Â  Â  const phoneNumber = userId.split('@')[0];
Â  Â  Â  const cleanOwnerNumber = this.config.bot.owner.number?.replace(/\D/g, ''); // Use this.config
Â  Â  Â  const cleanUserNumber = phoneNumber.replace(/\D/g, '');
Â  Â  Â  
Â  Â  Â  return cleanOwnerNumber && cleanOwnerNumber === cleanUserNumber;
Â  Â  } catch (error) {
Â  Â  Â  return false;
Â  Â  }
Â  }

Â  /**
Â  Â * Check if user is currently blocked
Â  Â */
Â  checkBlocked(userId) {
Â  Â  const blockInfo = this.blockedUsers.get(userId);
Â  Â  
Â  Â  if (!blockInfo) {
Â  Â  Â  return { allowed: true };
Â  Â  }

Â  Â  // Check if block has expired
Â  Â  if (Date.now() > blockInfo.blockedUntil) {
Â  Â  Â  this.blockedUsers.delete(userId);
Â  Â  Â  this.logger.info('User unblocked (expired)', { 
Â  Â  Â  Â  userId, 
Â  Â  Â  Â  reason: blockInfo.reason 
Â  Â  Â  });
Â  Â  Â  return { allowed: true };
Â  Â  }

Â  Â  this.logger.bot.rateLimit(userId, 'blocked_user_attempt');

Â  Â  return {
Â  Â  Â  allowed: false,
Â  Â  Â  reason: 'user_blocked',
Â  Â  Â  shouldRespond: false,
Â  Â  Â  response: null
Â  Â  };
Â  }

Â  /**
Â  Â * Check rate limiting
Â  Â */
Â  checkRateLimit(userId, timestamp) {
Â  Â  const activity = this.userActivity.get(userId) || {
Â  Â  Â  minuteCount: 0,
Â  Â  Â  hourCount: 0,
Â  Â  Â  lastMessageTime: 0,
Â  Â  Â  warningCount: 0,
Â  Â  Â  minuteReset: timestamp + 60000, // Reset in 1 minute
Â  Â  Â  hourReset: timestamp + 3600000 // Reset in 1 hour
Â  Â  };

Â  Â  // Reset counters if time has passed
Â  Â  if (timestamp > activity.minuteReset) {
Â  Â  Â  activity.minuteCount = 0;
Â  Â  Â  activity.minuteReset = timestamp + 60000;
Â  Â  }

Â  Â  if (timestamp > activity.hourReset) {
Â  Â  Â  activity.hourCount = 0;
Â  Â  Â  activity.hourReset = timestamp + 3600000;
Â  Â  }

Â  Â  // Check minute limit
Â  Â  if (activity.minuteCount >= this.maxMessagesPerMinute) {
Â  Â  Â  activity.warningCount++;
Â  Â  Â  this.userActivity.set(userId, activity);

Â  Â  Â  this.logger.bot.rateLimit(userId, 'minute_limit_exceeded');

Â  Â  Â  // Block user if they repeatedly hit rate limits
Â  Â  Â  if (activity.warningCount >= 3) {
Â  Â  Â  Â  this.blockUser(userId, 10 * 60 * 1000, 'repeated_rate_limit_violations'); // 10 minutes
Â  Â  Â  }

Â  Â  Â  return {
Â  Â  Â  Â  allowed: false,
Â  Â  Â  Â  reason: 'rate_limit_minute',
Â  Â  Â  Â  shouldRespond: true,
Â  Â  Â  Â  response: this.getRandomCooldownMessage()
Â  Â  Â  };
Â  Â  }

Â  Â  // Check hour limit
Â  Â  if (activity.hourCount >= this.maxMessagesPerHour) {
Â  Â  Â  this.logger.bot.rateLimit(userId, 'hour_limit_exceeded');

Â  Â  Â  this.blockUser(userId, 60 * 60 * 1000, 'hourly_rate_limit_exceeded'); // 1 hour

Â  Â  Â  return {
Â  Â  Â  Â  allowed: false,
Â  Â  Â  Â  reason: 'rate_limit_hour',
Â  Â  Â  Â  shouldRespond: true,
Â  Â  Â  Â  response: "You've reached the hourly message limit. Please try again later."
Â  Â  Â  };
Â  Â  }

Â  Â  return { allowed: true };
Â  }

Â  /**
Â  Â * Check for suspicious messaging patterns
Â  Â */
Â  checkSuspiciousPatterns(userId, messageText, timestamp) {
Â  Â  const patterns = this.suspiciousPatterns.get(userId) || {
Â  Â  Â  spamCount: 0,
Â  Â  Â  repeatCount: 0,
Â  Â  Â  lastMessages: [],
Â  Â  Â  lastSpamTime: 0
Â  Â  };

Â  Â  // Check for repeated identical messages
Â  Â  const recentMessages = patterns.lastMessages.filter(msg => 
Â  Â  Â  timestamp - msg.timestamp < 300000 // Last 5 minutes
Â  Â  );

Â  Â  const identicalCount = recentMessages.filter(msg => 
Â  Â  Â  msg.text === messageText
Â  Â  ).length;

Â  Â  if (identicalCount >= 2) { // Third identical message in 5 minutes
Â  Â  Â  patterns.repeatCount++;
Â  Â  Â  
Â  Â  Â  this.logger.warn('User sending repeated messages', {
Â  Â  Â  Â  userId,
Â  Â  Â  Â  messageText: messageText.substring(0, 50),
Â  Â  Â  Â  identicalCount: identicalCount + 1
Â  Â  Â  });

Â  Â  Â  if (patterns.repeatCount >= 3) {
Â  Â  Â  Â  this.blockUser(userId, 30 * 60 * 1000, 'repeated_identical_messages'); // 30 minutes
Â  Â  Â  Â  
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  allowed: false,
Â  Â  Â  Â  Â  reason: 'repeated_messages',
Â  Â  Â  Â  Â  shouldRespond: true,
Â  Â  Â  Â  Â  response: "Please avoid sending the same message repeatedly. You've been temporarily restricted."
Â  Â  Â  Â  };
Â  Â  Â  }

Â  Â  Â  return {
Â  Â  Â  Â  allowed: false,
Â  Â  Â  Â  reason: 'repeated_messages',
Â  Â  Â  Â  shouldRespond: true,
Â  Â  Â  Â  response: "I notice you're sending similar messages. Please vary your messages to continue chatting."
Â  Â  Â  };
Â  Â  }

Â  Â  // Check message frequency (rapid fire messages)
Â  Â  if (patterns.lastMessages.length > 0) {
Â  Â  Â  const lastMessage = patterns.lastMessages[patterns.lastMessages.length - 1];
Â  Â  Â  const timeDiff = timestamp - lastMessage.timestamp;
Â  Â  Â  
Â  Â  Â  if (timeDiff < 2000) { // Less than 2 seconds between messages
Â  Â  Â  Â  patterns.spamCount++;
Â  Â  Â  Â  
Â  Â  Â  Â  if (patterns.spamCount >= 5) {
Â  Â  Â  Â  Â  this.logger.warn('User sending messages too rapidly', {
Â  Â  Â  Â  Â  Â  userId,
Â  Â  Â  Â  Â  Â  spamCount: patterns.spamCount,
Â  Â  Â  Â  Â  Â  timeDiff
Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  this.blockUser(userId, 15 * 60 * 1000, 'rapid_fire_messaging'); // 15 minutes
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  allowed: false,
Â  Â  Â  Â  Â  Â  reason: 'rapid_messaging',
Â  Â  Â  Â  Â  Â  shouldRespond: true,
Â  Â  Â  Â  Â  Â  response: "Please slow down! You're sending messages too quickly. Take a moment to breathe."
Â  Â  Â  Â  Â  };
Â  Â  Â  Â  }
Â  Â  Â  } else if (timeDiff > 10000) { // Reset spam count if more than 10 seconds
Â  Â  Â  Â  patterns.spamCount = Math.max(0, patterns.spamCount - 1);
Â  Â  Â  }
Â  Â  }

Â  Â  // Update patterns
Â  Â  patterns.lastMessages.push({
Â  Â  Â  text: messageText,
Â  Â  Â  timestamp: timestamp
Â  Â  });

Â  Â  // Keep only last 10 messages for pattern analysis
Â  Â  if (patterns.lastMessages.length > 10) {
Â  Â  Â  patterns.lastMessages = patterns.lastMessages.slice(-10);
Â  Â  }

Â  Â  this.suspiciousPatterns.set(userId, patterns);

Â  Â  return { allowed: true };
Â  }

Â  /**
Â  Â * Check for spam content
Â  Â */
Â  checkSpamContent(messageText, isGroup) {
Â  Â  if (!messageText || messageText.length < 10) {
Â  Â  Â  return { allowed: true };
Â  Â  }

Â  Â  const text = messageText.toLowerCase();
Â  Â  
Â  Â  // Define spam patterns
Â  Â  const spamPatterns = [
Â  Â  Â  /(.)\1{10,}/, // Repeated characters (11+ times)
Â  Â  Â  /(.{1,3})\1{5,}/, // Repeated short sequences
Â  Â  Â  /(https?:\/\/[^\s]+){3,}/, // Multiple URLs
Â  Â  Â  /click here|free money|win now|urgent|limited time/gi, // Common spam phrases
Â  Â  Â  /[!@#$%^&*]{5,}/, // Excessive special characters
Â  Â  Â  /\b(buy|sell|cheap|discount|offer).{0,20}(now|today|urgent)\b/gi // Commercial spam
Â  Â  ];

Â  Â  for (const pattern of spamPatterns) {
Â  Â  Â  if (pattern.test(text)) {
Â  Â  Â  Â  this.logger.warn('Spam content detected', {
Â  Â  Â  Â  Â  pattern: pattern.toString(),
Â  Â  Â  Â  Â  messagePreview: messageText.substring(0, 100)
Â  Â  Â  Â  });

Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  allowed: false,
Â  Â  Â  Â  Â  reason: 'spam_content',
Â  Â  Â  Â  Â  shouldRespond: !isGroup, // Don't respond to spam in groups to avoid clutter
Â  Â  Â  Â  Â  response: "Your message appears to be spam. Please send meaningful messages."
Â  Â  Â  Â  };
Â  Â  Â  }
Â  Â  }

Â  Â  // Check message length (extremely long messages might be spam)
Â  Â  if (messageText.length > 2000) {
Â  Â  Â  this.logger.warn('Extremely long message detected', {
Â  Â  Â  Â  length: messageText.length,
Â  Â  Â  Â  messagePreview: messageText.substring(0, 100)
Â  Â  Â  });

Â  Â  Â  return {
Â  Â  Â  Â  allowed: false,
Â  Â  Â  Â  reason: 'message_too_long',
Â  Â  Â  Â  shouldRespond: true,
Â  Â  Â  Â  response: "Your message is quite long. Please break it into smaller parts for better conversation."
Â  Â  Â  };
Â  Â  }

Â  Â  return { allowed: true };
Â  }

Â  /**
Â  Â * Update user activity tracking
Â  Â */
Â  updateUserActivity(userId, messageText, timestamp) {
Â  Â  const activity = this.userActivity.get(userId) || {
Â  Â  Â  minuteCount: 0,
Â  Â  Â  hourCount: 0,
Â  Â  Â  lastMessageTime: 0,
Â  Â  Â  warningCount: 0,
Â  Â  Â  minuteReset: timestamp + 60000,
Â  Â  Â  hourReset: timestamp + 3600000
Â  Â  };

Â  Â  activity.minuteCount++;
Â  Â  activity.hourCount++;
Â  Â  activity.lastMessageTime = timestamp;

Â  Â  this.userActivity.set(userId, activity);
Â  }

Â  /**
Â  Â * Track suspicious activity for repeat offenders
Â  Â */
Â  trackSuspiciousActivity(userId, reason) {
Â  Â  const patterns = this.suspiciousPatterns.get(userId) || {
Â  Â  Â  spamCount: 0,
Â  Â  Â  repeatCount: 0,
Â  Â  Â  lastMessages: [],
Â  Â  Â  lastSpamTime: 0,
Â  Â  Â  violations: []
Â  Â  };

Â  Â  patterns.violations = patterns.violations || [];
Â  Â  patterns.violations.push({
Â  Â  Â  reason,
Â  Â  Â  timestamp: Date.now()
Â  Â  });

Â  Â  // Remove old violations (older than 24 hours)
Â  Â  patterns.violations = patterns.violations.filter(v => 
Â  Â  Â  Date.now() - v.timestamp < 24 * 60 * 60 * 1000
Â  Â  );

Â  Â  // Block user if too many violations
Â  Â  if (patterns.violations.length >= 5) {
Â  Â  Â  this.blockUser(userId, 24 * 60 * 60 * 1000, 'repeated_violations'); // 24 hours
Â  Â  }

Â  Â  this.suspiciousPatterns.set(userId, patterns);
Â  }

Â  /**
Â  Â * Block a user temporarily
Â  Â */
Â  blockUser(userId, durationMs, reason) {
Â  Â  const blockedUntil = Date.now() + durationMs;
Â  Â  
Â  Â  this.blockedUsers.set(userId, {
Â  Â  Â  blockedUntil,
Â  Â  Â  reason,
Â  Â  Â  blockedAt: Date.now()
Â  Â  });

Â  Â  this.logger.info('User blocked temporarily', {
Â  Â  Â  userId,
Â  Â  Â  reason,
Â  Â  Â  durationMs,
Â  Â  Â  blockedUntil: new Date(blockedUntil).toISOString()
Â  Â  });
Â  }

Â  /**
Â  Â * Manually unblock a user (for owner use)
Â  Â */
Â  unblockUser(userId) {
Â  Â  const wasBlocked = this.blockedUsers.has(userId);
Â  Â  this.blockedUsers.delete(userId);
Â  Â  
Â  Â  if (wasBlocked) {
Â  Â  Â  this.logger.info('User manually unblocked', { userId });
Â  Â  Â  return true;
Â  Â  }
Â  Â  
Â  Â  return false;
Â  }

Â  /**
Â  Â * Get random cooldown message
Â  Â */
Â  getRandomCooldownMessage() {
Â  Â  // ðŸŸ¢ CORRECTED: Use this.config to get the messages.
Â  Â  const messages = this.config.state.default.rateLimit.cooldownMessages;
Â  Â  return messages[Math.floor(Math.random() * messages.length)];
Â  }

Â  /**
Â  Â * Setup cleanup timer to remove old data
Â  Â */
Â  setupCleanupTimer() {
Â  Â  // Clean up old data every hour
Â  Â  // ðŸŸ¢ CORRECTED: Changed 'config.guard' to 'config.history'
Â  Â  setInterval(() => {
Â  Â  Â  this.cleanupOldData();
Â  Â  }, this.config.history.cleanupIntervalMs); 
Â  }

Â  /**
Â  Â * Clean up old tracking data
Â  Â */
Â  cleanupOldData() {
Â  Â  const now = Date.now();
Â  Â  const oneDayAgo = now - (24 * 60 * 60 * 1000);
Â  Â  
Â  Â  // Clean up old user activity
Â  Â  for (const [userId, activity] of this.userActivity.entries()) {
Â  Â  Â  if (activity.lastMessageTime < oneDayAgo) {
Â  Â  Â  Â  this.userActivity.delete(userId);
Â  Â  Â  }
Â  Â  }
Â  Â  
Â  Â  // Clean up old suspicious patterns
Â  Â  for (const [userId, patterns] of this.suspiciousPatterns.entries()) {
Â  Â  Â  if (patterns.lastMessages.length === 0 || 
Â  Â  Â  Â  Â  patterns.lastMessages[patterns.lastMessages.length - 1].timestamp < oneDayAgo) {
Â  Â  Â  Â  this.suspiciousPatterns.delete(userId);
Â  Â  Â  }
Â  Â  }
Â  Â  
Â  Â  // Remove expired blocks
Â  Â  for (const [userId, blockInfo] of this.blockedUsers.entries()) {
Â  Â  Â  if (now > blockInfo.blockedUntil) {
Â  Â  Â  Â  this.blockedUsers.delete(userId);
Â  Â  Â  }
Â  Â  }
Â  Â  
Â  Â  this.logger.debug('Cleanup completed', {
Â  Â  Â  activeUsers: this.userActivity.size,
Â  Â  Â  suspiciousPatterns: this.suspiciousPatterns.size,
Â  Â  Â  blockedUsers: this.blockedUsers.size
Â  Â  });
Â  }

Â  /**
Â  Â * Get statistics
Â  Â */
Â  getStatistics() {
Â  Â  return {
Â  Â  Â  activeUsers: this.userActivity.size,
Â  Â  Â  blockedUsers: this.blockedUsers.size,
Â  Â  Â  suspiciousPatterns: this.suspiciousPatterns.size,
Â  Â  Â  rateLimitEnabled: this.rateLimitEnabled,
Â  Â  Â  limits: {
Â  Â  Â  Â  messagesPerMinute: this.maxMessagesPerMinute,
Â  Â  Â  Â  messagesPerHour: this.maxMessagesPerHour
Â  Â  Â  }
Â  Â  };
Â  }

Â  /**
Â  Â * Clean shutdown
Â  Â */
Â  async shutdown() {
Â  Â  this.logger.info('ðŸ”„ Shutting down bot guard...');
Â  Â  
Â  Â  // Clear all timers and data
Â  Â  this.userActivity.clear();
Â  Â  this.blockedUsers.clear();
Â  Â  this.suspiciousPatterns.clear();
Â  Â  
Â  Â  this.logger.info('âœ… Bot guard shutdown complete');
Â  }
}